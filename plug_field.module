<?php

/**
 * @file
 * Module implementation file.
 */

use \Drupal\plug_field\PlugFieldTypeManager;

/**
 * Implements hook_form_FORM_ID_alter() for composer_manager_settings_form().
 */
function plug_field_form_composer_manager_settings_form_alter(&$form, &$form_state) {
  if (variable_get('composer_manager_autoloader_bootstrap', 1)) {
    $form['composer_manager_autoloader_bootstrap']['#description'] .= '<br /><strong>' . t('Plug Field module requires load on Boot. Please, select "Boot" above.') . '</strong>';
  }
  else {
    $form['composer_manager_autoloader_bootstrap']['#disabled'] = TRUE;
    $form['composer_manager_autoloader_bootstrap']['#description'] .= '<br /><strong>' . t('This field is disabled because Plug Field module requires load on Boot.') . '</strong>';
  }
}

/**
 * Implements hook_requirements().
 */
function plug_field_requirements($phase) {
  if ($phase == 'runtime') {
    if (variable_get('composer_manager_autoloader_bootstrap', 1)) {
      return array('plug_field' => array(
        'title' => t('Plug Field Autoload classes'),
        'description' => t('Plug Field classes are being loaded on init, this can led to unexpected behaviors. Please, change it on !link.', array('!link' => l(t('Composer Manager admin page'), 'admin/config/system/composer-manager/settings'))),
        'severity' => REQUIREMENT_ERROR,
      ));
    }
    else {
      return array('plug_field' => array(
        'title' => t('Plug Field Autoload classes'),
        'description' => t('Plug Field classes are being loaded on boot, as expected.'),
        'severity' => REQUIREMENT_OK,
      ));
    }
  }
}

/**
 * implements hook_field_info().
 */
function plug_field_field_info() {
  return PlugFieldTypeManager::get()->getDefinitions();
}

/**
 * Implements hook_field_load().
 */
function plug_field_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    $plugin->load($entity_type, $entities, $field, $instances, $langcode, $items, $age);
  }
}

/**
 * Implements hook_field_prepare_view().
 */
function plug_field_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    $plugin->prepareView($entity_type, $entities, $field, $instances, $langcode, $items);
  }
}

/**
 * Implements hook_field_validate().
 */
function plug_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    $plugin->validate($entity_type, $entity, $field, $instance, $langcode, $items, $errors);
  }
}

/**
 * Implements hook_field_presave().
 */
function plug_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    $plugin->preSave($entity_type, $entity, $field, $instance, $langcode, $items);
  }
}

/**
 * Implements hook_field_insert().
 */
function plug_field_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    $plugin->insert($entity_type, $entity, $field, $instance, $langcode, $items);
  }
}

/**
 * Implements hook_field_update().
 */
function plug_field_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    $plugin->update($entity_type, $entity, $field, $instance, $langcode, $items);
  }
}

/**
 * Implements hook_field_delete().
 */
function plug_field_field_delete($entity_type, $entity, $field, $instance, $langcode, $items) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    $plugin->delete($entity_type, $entity, $field, $instance, $langcode, $items);
  }
}

/**
 * Implements hook_field_delete_revision().
 */
function plug_field_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    $plugin->deleteRevision($entity_type, $entity, $field, $instance, $langcode, $items);
  }
}

/**
 * Implements hook_field_prepare_translation().
 */
function plug_field_field_prepare_translation($entity_type, $entity, $field, $instance, $langcode, &$items, $source_entity, $source_langcode) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    $plugin->prepareTranslation($entity_type, $entity, $field, $instance, $langcode, $items, $source_entity, $source_langcode);
  }
}

/**
 * Implements hook_field_is_empty().
 */
function plug_field_field_is_empty($item, $field) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    return $plugin->isEmpty($item, $field);
  }
}

/**
 * Implements hook_field_settings_form().
 */
function plug_field_field_settings_form($field, $instance, $has_data) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    return $plugin->settingsForm($field, $instance, $has_data);
  }
}

/**
 * Implements hook_field_instance_settings_form().
 */
function plug_field_field_instance_settings_form($field, $instance) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    return $plugin->instanceSettingsForm($field, $instance);
  }
}
