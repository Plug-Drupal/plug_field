<?php

/**
 * @file
 * Module implementation file.
 */

use \Drupal\plug_field\PlugFieldTypeManager;

/**
 * Implements hook_system_info_alter().
 *
 * Ensures that modules providing field plugins in use can't be disabled.
 */
function plug_field_system_info_alter(&$info, $file, $type) {
  $definitions = PlugFieldTypeManager::get()->getDefinitions();

  foreach ($definitions as $definition) {
    if ($type == 'module' && $definition['provider'] == $file->name) {
      $fields = field_read_fields(array('type' => $definition['id']), array('include_deleted' => TRUE));
      if ($fields) {
        $info['required'] = TRUE;

        // Provide an explanation message (only mention pending deletions if
        // there remains no actual, non-deleted fields).
        $non_deleted = FALSE;
        foreach ($fields as $field) {
          if (empty($field['deleted'])) {
            $non_deleted = TRUE;
            break;
          }
        }
        if ($non_deleted) {
          if (module_exists('field_ui')) {
            $explanation = t('Field type(s) in use - see <a href="@fields-page">Field list</a>', array('@fields-page' => url('admin/reports/fields')));
          }
          else {
            $explanation = t('Fields type(s) in use');
          }
        }
        else {
          $explanation = t('Fields pending deletion');
        }
        $info['explanation'] = $explanation;
      }
    }
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Creates a new menu callback for field list page to show the plugin provider
 * instead of "Plug Field".
 */
function plug_field_menu_alter(&$items) {
  if (isset($items['admin/reports/fields'])) {
    $items['admin/reports/fields']['page callback'] = 'plug_field_field_ui_fields_list';
    $items['admin/reports/fields']['file'] = 'plug_field.admin.inc';
    $items['admin/reports/fields']['file path'] = drupal_get_path('module', 'plug_field');
  }
}

/**
 * Implements hook_field_info().
 */
function plug_field_field_info() {
  return PlugFieldTypeManager::get()->getDefinitions();
}

/**
 * Implements hook_field_load().
 */
function plug_field_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  // This is called before hook_init(), so we need to load composer manually.
  composer_manager_init();
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    $plugin->load($entity_type, $entities, $field, $instances, $langcode, $items, $age);
  }
}

/**
 * Implements hook_field_prepare_view().
 */
function plug_field_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    $plugin->prepareView($entity_type, $entities, $field, $instances, $langcode, $items);
  }
}

/**
 * Implements hook_field_validate().
 */
function plug_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    $plugin->validate($entity_type, $entity, $field, $instance, $langcode, $items, $errors);
  }
}

/**
 * Implements hook_field_presave().
 */
function plug_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    $plugin->preSave($entity_type, $entity, $field, $instance, $langcode, $items);
  }
}

/**
 * Implements hook_field_insert().
 */
function plug_field_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    $plugin->insert($entity_type, $entity, $field, $instance, $langcode, $items);
  }
}

/**
 * Implements hook_field_update().
 */
function plug_field_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    $plugin->update($entity_type, $entity, $field, $instance, $langcode, $items);
  }
}

/**
 * Implements hook_field_delete().
 */
function plug_field_field_delete($entity_type, $entity, $field, $instance, $langcode, $items) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    $plugin->delete($entity_type, $entity, $field, $instance, $langcode, $items);
  }
}

/**
 * Implements hook_field_delete_revision().
 */
function plug_field_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    $plugin->deleteRevision($entity_type, $entity, $field, $instance, $langcode, $items);
  }
}

/**
 * Implements hook_field_prepare_translation().
 */
function plug_field_field_prepare_translation($entity_type, $entity, $field, $instance, $langcode, &$items, $source_entity, $source_langcode) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    $plugin->prepareTranslation($entity_type, $entity, $field, $instance, $langcode, $items, $source_entity, $source_langcode);
  }
}

/**
 * Implements hook_field_is_empty().
 */
function plug_field_field_is_empty($item, $field) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    return $plugin->isEmpty($item, $field);
  }
}

/**
 * Implements hook_field_settings_form().
 */
function plug_field_field_settings_form($field, $instance, $has_data) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    return $plugin->settingsForm($field, $instance, $has_data);
  }
}

/**
 * Implements hook_field_instance_settings_form().
 */
function plug_field_field_instance_settings_form($field, $instance) {
  if ($plugin = PlugFieldTypeManager::get()->createInstance($field['type'])) {
    return $plugin->instanceSettingsForm($field, $instance);
  }
}
